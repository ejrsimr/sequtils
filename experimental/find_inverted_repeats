#!/usr/bin/env python3
# ejr: 2022-10-13
# INPUT = FASTA
# OUTPUT = bed file of inverted terminal repeats with sequences and score
#  when the repeat is longer than the min_itr I get adjacent sequences.
# what is the best way to merge them?
import sys
import string
from joblib import Parallel, delayed
import multiprocessing

window_size = 2500
min_itr = 21
min_score = 15
# min size is the minimum distance the ITRs must be apart
min_size = 250
min_gc = .1
# this isn't smart enough to split sequences, so you can only use as many core as there are seqs in fasta file
num_cores = 4

# MAIN
def main():
    fasta = {}
    filename = sys.argv[1]
    ## Open FASTA file
    with open(filename) as my_file:
        fasta = read_fasta(my_file)
        ## iterate over windows in each fasta sequences
        bed_out = Parallel(n_jobs=num_cores)(delayed(find_itr)(header, fasta) for header in fasta )
    
    # unwrap list of lists
    for header in bed_out:
        for itr in header:
            print(itr)

# find itr in one sequence at a time
def find_itr(header, fasta):
    bed_out = []
    seq = fasta[header]
    # iterate over windows

    for i in range(min_size, len(seq)-min_itr):
        # rc the left end of window (cheaper than rc on window)
        left_rc = rc(seq[i:i+min_itr])
        gc = perc_gc(left_rc)
        if gc > min_gc:
                
            # if remaining sequence is shorter than window just use what remains
            if window_size > len(seq) - (i + min_itr):
                range_end = len(seq) - (i + min_itr) +1
            else:
                range_end = i+window_size-min_itr+1

            for ii in range(i+min_itr,range_end):
                # do we only want best score?
                score = get_score(left_rc, seq[ii:ii+min_itr])
                if score >= min_score:
                    # +1 is because bed is 1 based
                    bed_out.append("\t".join((header, str(i), str(ii+min_itr+1), seq[i:i+min_itr], str(score), ".")))
    return(bed_out)

# READ IN FASTA
def read_fasta(fh):
    header = ""
    fasta = {}

    for line in fh:
        line = line.rstrip()
        if (line[0] == ">"):
            header = line[1:]
            fasta[header] = []
        else:
            fasta[header].append(line)

    for header in fasta:
        fasta[header] = ''.join(fasta[header])

    return fasta

# reverse complement sequences
def rc(seq):
    complements = seq.maketrans('ATGCatgc', 'TACGtacg')
    rcseq = seq.translate(complements)[::-1]
    return rcseq

# get GC content of sequence
def perc_gc(seq):
    gc = (seq.count("G") + seq.count("C"))/ float(len(seq))
    return gc

# count number of identical nt
def get_score(seq1, seq2):
    score = 0
    # Traverse the string 1 char by char
    for i in range(len(seq1)):
        if seq1[i] == seq2[i]:
            score += 1;

    return(score)

# MAIN
if __name__ == "__main__":
    main()