#!/usr/bin/env python3
# search through fasta file for regular expression and output either a bed file or fasta file
# ejr: 2022-09-27
# INPUT: 
#   FASTA FILE
#   regular expression
# OUTPUT:
# BED file of matches
# for git test

### IMPORT ####################################################################
import sys
import argparse
import signal
from re import finditer

### MAIN ######################################################################
def main():

    args = get_args()
    fasta = read_fasta(args.file)
    grep_regex(fasta, args.regex)

### SUBROUTINES ###############################################################

# search fasta for regex and return bed
def grep_regex(fasta, regex):
    for header in fasta:
        seqlen = len(fasta[header])
        # forward matches
        for match in finditer(regex, fasta[header]):
            print("\t".join((header, str(match.start()), str(match.end()), header + ":" + str(match.start()) + "-" + str(match.end()), "0", "+")))
        # reverse complement
        rc = reverse_complement(fasta[header])
        for match in finditer(regex, rc):
            print("\t".join((header,  str(seqlen - match.end()), str(seqlen - match.start()), header + ":" + str(seqlen - match.end()) + "-" + str(seqlen - match.start()), "0", "-")))

# reverse complement sequences
def reverse_complement(seq):
    # complement sequence
    bases = str.maketrans('AGCTagct','TCGAtcga')
    # reverse sequences; return
    return seq.translate(bases)[::-1]

# Read in FASTA file from STDIN
def read_fasta(filename):
    header = ""
    fasta = {}

    for line in filename:
        line = line.rstrip()
        if (line[0] == ">"):
            header = line[1:]
            fasta[header] = []
        else:
            fasta[header].append(line)

    for header in fasta:
        fasta[header] = ''.join(fasta[header]) 

    return fasta

# Get command-line arguments using argparse
def get_args():
    parser = argparse.ArgumentParser(description="Grep sequence from FASTA")
    # file defaults to stdin
    parser.add_argument('--file', type = argparse.FileType('r'), default = sys.stdin, help = 'Input FASTA - defaults to STDIN')
    parser.add_argument('--regex', type = str, default = '0', help = 'Regular expression to search for')
    args = parser.parse_args()

    return args


### RUN MAIN ##################################################################
if __name__ == "__main__":
    # this catches sigpipe errors so you don't get an error message if you tail of head output
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    main()